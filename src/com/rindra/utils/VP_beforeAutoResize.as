package com.rindra.utils {	import com.rindra.events.VPEvent;	import com.rindra.utils.Calculus;		import flash.display.Sprite;	import flash.display.StageAlign;	import flash.display.StageDisplayState;	import flash.display.StageScaleMode;	import flash.events.AsyncErrorEvent;	import flash.events.Event;	import flash.events.FullScreenEvent;	import flash.events.MouseEvent;	import flash.events.NetStatusEvent;	import flash.events.SecurityErrorEvent;	import flash.geom.Rectangle;	import flash.media.SoundTransform;	import flash.media.Video;	import flash.net.NetConnection;	import flash.net.NetStream;	import flash.net.NetStreamInfo;	import flash.system.Capabilities;	import flash.text.TextField;	import flash.text.TextFormat;		public class VP extends Sprite{				public var ns:NetStream;		private var nc:NetConnection;		private var vid:Video;		private var counter:Number=0;		private var path:String;		private var videoName:String;		private var option:int;		private var totalTime:int;		private var vpc:VPClient;		private var size:String;		private var playing:Boolean;		private var sounding:Boolean;		private var stopping:Boolean;		private var startPoint:Boolean = false;		private var midPoint:Boolean = false;		private var mark10s:Boolean = false;		private var mark5s:Boolean = false;		private var cc:Sprite;		private var tf:TextFormat;		private var ctrl:Sprite;		private var ctrlmc:Sprite;		private var customController:Sprite;		private var overlayStatus:Boolean;		private var VP_videoPath:String;		private var VP_videoName:String;		//private var mobileMode:String = 'AND';		private var mobileMode:String;		private var autoPlay:Boolean;		private var loadOnce:Boolean = true;		private var mVisible:Boolean;		private var replayVisible:Boolean = false;		private var fullscreenVisible:Boolean = false;				private var lastMouseX:Number = 0;		private var lastMouseY:Number = 0;				private var checkMouseOn:Boolean = false;				public var offsetX:Number; //for fullscreen		public var offsetY:Number; //for fullscreen				private var switcher:Number = 0;		private var currentXa:Number;		private var currentYa:Number;		private var currentXb:Number;		private var currentYb:Number;				private var tweenOn:Boolean = true;				private var initSound:Boolean;		private var initCTRL:Boolean;		private var initREPLAY:Boolean;		private var initCUSTOMSTART:Boolean;		private var initCUSTOMEND:Boolean;				private var disableFS:Boolean;				private var ypos:Number = 60;				private var hotCallback:Function = function():void{};				//public function VP(size:String, VP_videoPath:String, autoMute:Boolean = false, teaserMode:Boolean = false, VP_videoName:String = "", customController:Sprite = null, overlayStatus:Boolean = true, autoPlay:Boolean = true)				public function VP(size:String, VP_videoPath:String, disableFS:Boolean = false, teaserMode:Boolean = false, autoMute:Boolean = false, autoPlay:Boolean = true, autoHideBar:Boolean = false, customController:Sprite = null) {			this.offsetX = x;			this.offsetY = y;			this.size = size;			this.customController = customController;			//this.overlayStatus = overlayStatus;			overlayStatus = true;			this.VP_videoPath = VP_videoPath;			this.initREPLAY = false;			this.initSound = false;			this.initCTRL = false;			if(teaserMode){				this.initSound = true;				this.initCTRL = true;				this.initREPLAY = true;			}			if(autoMute){				this.initSound = true;			}			if(autoHideBar){				this.initCTRL = true;			}			if(disableFS){				this.fullscreenVisible = true;			}			//this.initSound = initSound;			//this.initCTRL = initCTRL;			//this.initREPLAY = initREPLAY;			this.disableFS = disableFS;			//this.VP_videoName = VP_videoName;			VP_videoName = '';			this.autoPlay = autoPlay;			this.mobileMode = Capabilities.version.split(" ")[0];						//this.mobileMode = 'AND';						this.name = 'vp';			init();		}				public function help():void{			trace('Arguments:\n' + 'size, video path, disable fullscreen button, teaser mode, auto mute, auto play, auto hide control bar');		}				public function setHotCallback(fn:Function):void{			hotCallback = fn;		}				public function showCap():String{//			return Capabilities.screenResolutionX + "x" + Capabilities.screenResolutionY;			return Capabilities.manufacturer + "\n" +  Capabilities.os + "\n" + Capabilities.screenColor + "\n" + Capabilities.playerType + "\n";		}				private function init():void{			/*if(mobileMode == 'AND'){				ctrl = new VPMobileController();			}else{				ctrl = (customController == null)?new VPController():customController;			}*/			ctrl = (customController == null)?new VPController():customController;			ctrlmc = Sprite(ctrl.getChildByName('ctrl_mc'));			addChild(ctrl);			vpc = new VPClient();						Sprite(ctrlmc.getChildByName('play_btn')).visible = false;			Sprite(ctrlmc.getChildByName('play_btn')).mouseChildren = false;			Sprite(ctrlmc.getChildByName('play_btn')).buttonMode = true;			Sprite(ctrlmc.getChildByName('pause_btn')).mouseChildren = false;			Sprite(ctrlmc.getChildByName('pause_btn')).buttonMode = true;			Sprite(ctrlmc.getChildByName('vol_on')).mouseChildren = false;			Sprite(ctrlmc.getChildByName('vol_on')).buttonMode = true;				Sprite(ctrlmc.getChildByName('vol_off')).mouseChildren = false;			Sprite(ctrlmc.getChildByName('vol_off')).buttonMode = true;			Sprite(ctrl.getChildByName('bigPlay_btn')).visible = false;			Sprite(ctrl.getChildByName('bigPlay_btn')).mouseChildren = false;			Sprite(ctrl.getChildByName('bigPlay_btn')).buttonMode = true;			Sprite(ctrl.getChildByName('bigPause_btn')).visible = false;			Sprite(ctrl.getChildByName('bigPause_btn')).mouseChildren = false;			Sprite(ctrl.getChildByName('bigPause_btn')).buttonMode = true;			Sprite(ctrl.getChildByName('bigReplay_btn')).mouseChildren = false;			Sprite(ctrl.getChildByName('bigReplay_btn')).buttonMode = true;			Sprite(ctrlmc.getChildByName('fullscreen_btn')).buttonMode = true;			Sprite(ctrlmc.getChildByName('exitfullscreen_btn')).visible = false;			Sprite(ctrlmc.getChildByName('fullscreen_btn')).mouseChildren = false;			Sprite(ctrlmc.getChildByName('exitfullscreen_btn')).buttonMode = true;			Sprite(ctrlmc.getChildByName('exitfullscreen_btn')).mouseChildren = false;			Sprite(Sprite(ctrlmc.getChildByName('sb')).getChildByName('scrub')).mouseChildren = false;			Sprite(Sprite(ctrlmc.getChildByName('sb')).getChildByName('scrub')).buttonMode = true;			Sprite(Sprite(ctrlmc.getChildByName('sb')).getChildByName('scrub')).addEventListener(MouseEvent.MOUSE_DOWN, _onDrag);			if(mobileMode == 'AND'){				mVisible = false;				this.addEventListener(MouseEvent.CLICK, _onShowCtrl, true);				/*only when user actually clicks on this, if it sets to default=false then if user clicks on any element 				inside this it will trigger both thefunction the element is associated with onclick and this onClick*/			}else{				currentXa = mouseX;				currentYa = mouseY;				currentXb = mouseX;				currentYb = mouseY;				this.addEventListener(MouseEvent.ROLL_OVER, _onOver);				this.addEventListener(MouseEvent.ROLL_OUT, _onOut);			}			this.addEventListener(Event.MOUSE_LEAVE, _onOut);			Sprite(ctrlmc.getChildByName('play_btn')).addEventListener(MouseEvent.CLICK, _onPlay);			Sprite(ctrl.getChildByName('bigPlay_btn')).addEventListener(MouseEvent.CLICK, _onPlay);			Sprite(ctrl.getChildByName('bigReplay_btn')).addEventListener(MouseEvent.CLICK, _onReplay);			Sprite(ctrlmc.getChildByName('pause_btn')).addEventListener(MouseEvent.CLICK, _onPause);			Sprite(ctrl.getChildByName('bigPause_btn')).addEventListener(MouseEvent.CLICK, _onPause);			Sprite(ctrlmc.getChildByName('vol_on')).addEventListener(MouseEvent.CLICK, _onSoundOn);			Sprite(ctrlmc.getChildByName('vol_off')).addEventListener(MouseEvent.CLICK, _onSoundOff);			Sprite(ctrlmc.getChildByName('fullscreen_btn')).addEventListener(MouseEvent.CLICK, _onFullScreen);			Sprite(ctrlmc.getChildByName('exitfullscreen_btn')).addEventListener(MouseEvent.CLICK, _onExitFullScreen);						allOff();			Sprite(ctrl.getChildByName('bigReplay_btn')).visible = false;			checkBW();			//connect();			position();		}				public function position(ctrlY:Number=0):void{			//if(mobileMode != 'AND'){				ctrlmc.x = (Number(size.split('x')[0]) - ctrlmc.width)/2;				ctrlmc.y = Number(size.split('x')[1]) - ypos + ctrlY;							if(disableFS){					ctrlmc.getChildByName('overlay_mc').x = -77;					ctrlmc.x += 10;				}							Sprite(ctrl.getChildByName('loading')).x = (Number(size.split('x')[0]) - Sprite(ctrl.getChildByName('loading')).width)/2;				Sprite(ctrl.getChildByName('loading')).y = (Number(size.split('x')[1]) - Sprite(ctrl.getChildByName('loading')).height)/2;							Sprite(ctrl.getChildByName('mask_mc')).width = Number(size.split('x')[0]);				Sprite(ctrl.getChildByName('mask_mc')).height = Number(size.split('x')[1]);				Sprite(ctrl.getChildByName('player')).mask = Sprite(ctrl.getChildByName('mask_mc'));							Sprite(ctrl.getChildByName('bg')).width = Number(size.split('x')[0]);				Sprite(ctrl.getChildByName('bg')).height = Number(size.split('x')[1]);							Sprite(Sprite(ctrl.getChildByName('bigReplay_btn')).getChildByName('bg')).width = Number(size.split('x')[0]);				Sprite(Sprite(ctrl.getChildByName('bigReplay_btn')).getChildByName('bg')).height = Number(size.split('x')[1]);							Sprite(Sprite(ctrl.getChildByName('bigReplay_btn')).getChildByName('replay')).x = (Number(size.split('x')[0]) - Sprite(ctrl.getChildByName('bigReplay_btn')).getChildByName('replay').width)/2;				Sprite(Sprite(ctrl.getChildByName('bigReplay_btn')).getChildByName('replay')).y = (Number(size.split('x')[1]) - Sprite(ctrl.getChildByName('bigReplay_btn')).getChildByName('replay').height)/2;			//}				}				private function checkBW():void{		//	var vp_bw:BW = new BW();		//	vp_bw.addEventListener(VPEvent.BW_CHECK_COMPLETE, _launch);			_launch();		}				private function _launch($e:VPEvent = null):void{			connect();		}				private function _onShowCtrl($e:MouseEvent):void{			if(!mVisible){				if($e.target.name == 'player'){					mVisible = true;					updatePlayer();				}			}else{				if($e.target.name == 'player'){					mVisible = false;					allOff();				}			}		}								private function _onSoundOn($e:MouseEvent):void{			makeSoundOn($e);		}				private function _onSoundOff($e:MouseEvent):void{			makeSoundOff($e);		}				private function _onPlay($e:MouseEvent):void{			playVideo();		}				private function _onReplay($e:MouseEvent):void{			replayVideo();		}				private function _onPause($e:MouseEvent):void{			pauseVideo();		}				private function _onMouseMove($e:MouseEvent):void{					}		private function delayOff():void{		}				private function updatePlayer():void{			allOn();			Sprite(ctrlmc.getChildByName('play_btn')).visible = !playing;			Sprite(ctrlmc.getChildByName('pause_btn')).visible = playing;			Sprite(ctrlmc.getChildByName('vol_on')).visible = !sounding;			Sprite(ctrlmc.getChildByName('vol_off')).visible = sounding;			Sprite(ctrlmc.getChildByName('overlay_mc')).visible = overlayStatus;			Sprite(ctrlmc.getChildByName('fullscreen_btn')).visible = !fullscreenVisible;			if(disableFS){				Sprite(ctrlmc.getChildByName('exitfullscreen_btn')).visible = !fullscreenVisible;			}else{				Sprite(ctrlmc.getChildByName('exitfullscreen_btn')).visible = fullscreenVisible;			}		}		private function _onOver($e:MouseEvent):void{			updatePlayer();		}				private function _onOut($e:MouseEvent):void{			allOff();		}		private function _onFullScreen($e:MouseEvent):void{			//dispatchEvent(new VPEvent('video_fullscreen', true, false));			fullscreenVisible = true;			stage.addEventListener(FullScreenEvent.FULL_SCREEN, _resizeCtrl);			stage.fullScreenSourceRect = new Rectangle(offsetX,offsetY,Number(size.split('x')[0]),Number(size.split('x')[1]));			stage.displayState = StageDisplayState.FULL_SCREEN;		}		private function _onExitFullScreen($e:MouseEvent):void{			exitFullScreen();		}		private function _resizeCtrl($e:FullScreenEvent):void{			if($e.fullScreen){				try{					dispatchEvent(new VPEvent('video_fullscreen', true, false));					Sprite(ctrlmc.getChildByName('exitfullscreen_btn')).visible = true;					Sprite(ctrlmc.getChildByName('fullscreen_btn')).visible = false;				}catch(e:Error){									}			}else{				fullscreenVisible = false;				dispatchEvent(new VPEvent('video_exit_fullscreen', true, false));			}		}				private function allOn():void{			ctrlmc.visible = !(initSound && initCTRL && initREPLAY) //doesn't apply if teaserMode						Sprite(ctrlmc.getChildByName('play_btn')).visible = true;			Sprite(ctrlmc.getChildByName('pause_btn')).visible = true;			Sprite(ctrlmc.getChildByName('vol_on')).visible = true;			Sprite(ctrlmc.getChildByName('vol_off')).visible = true;			Sprite(Sprite(ctrlmc.getChildByName('sb')).getChildByName('scrub')).visible = true;			Sprite(Sprite(ctrlmc.getChildByName('sb')).getChildByName('scrollbar_bg')).visible = true;			Sprite(ctrlmc.getChildByName('overlay_mc')).visible = true;			Sprite(ctrlmc.getChildByName('fullscreen_btn')).visible = true;			Sprite(ctrlmc.getChildByName('exitfullscreen_btn')).visible = true;			if(mobileMode == 'AND'){							}			TextField(ctrlmc.getChildByName('t')).visible = true;		}				public function viewControllerOnStart(status:Boolean):void{			allOff();		}				private function allOff():void{			Sprite(ctrlmc.getChildByName('play_btn')).visible = false;			Sprite(ctrlmc.getChildByName('pause_btn')).visible = false;			Sprite(ctrlmc.getChildByName('vol_on')).visible = false;			Sprite(ctrlmc.getChildByName('vol_off')).visible = false;			Sprite(Sprite(ctrlmc.getChildByName('sb')).getChildByName('scrub')).visible = false;			Sprite(Sprite(ctrlmc.getChildByName('sb')).getChildByName('scrollbar_bg')).visible = false;			Sprite(ctrlmc.getChildByName('overlay_mc')).visible = false;			Sprite(ctrlmc.getChildByName('fullscreen_btn')).visible = false;			Sprite(ctrlmc.getChildByName('exitfullscreen_btn')).visible = false;			if(mobileMode == 'AND'){			}			TextField(ctrlmc.getChildByName('t')).visible = false;		}				private function connect():void {			nc = new NetConnection();			nc.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);			nc.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncerror);			var ext:String = VP_videoPath.split('.')[VP_videoPath.split('.').length-1];			if(VP_videoPath.split(ext+':')[1] == undefined){				VP_videoName = '';				nc.connect(null);			}else{				var temp0:String = VP_videoPath.split(ext+':')[0];				var temp1:String = VP_videoPath.split(ext+':')[1];				var temp2:Array = temp1.split('/');				var temp3:String = temp2[temp2.length-1];				var temp4:String = temp1.split(temp3)[0];				VP_videoName = temp3;				nc.connect(temp0+temp4);			}		}				NetConnection.prototype.onBWDone = function():void;		NetStream.prototype.onXMPData = function():void;				private function asyncerror(e:AsyncErrorEvent):void{}				private function netStatusHandler(event:NetStatusEvent):void {			//trace(event.info.code);			switch(event.info.code){				case "NetConnection.Connect.Success":					ns = new NetStream(nc);					ns.client = vpc;					Sprite(ctrl.getChildByName('player')).alpha = 0;					vid = new Video(Number(size.split('x')[0]), Number(size.split('x')[1]));					vid.smoothing = true;					vid.attachNetStream(ns);										playing = true;					sounding = true;					stopping = false;					updatePlayer();										if(initCTRL){						ctrlmc.visible = false;					}					if(initSound){						makeSoundOff();					}					if(initREPLAY){						Sprite(ctrl.getChildByName('bigReplay_btn')).alpha = 0;					}					if(autoPlay){						initPlay();					}else{						playing = false;						stopping = false;						updatePlayer();						//Sprite(ctrlmc.getChildByName('play_btn')).visible = true;						//initPlay();						//pauseVideo();					}					Sprite(ctrl.getChildByName('player')).addChild(vid);					ns.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);					ns.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncerror);					addEventListener(Event.ENTER_FRAME, _onEnterFrame);					/*if(loadOnce && !autoPlay){						loadOnce = false;						dispatchEvent(new VPEvent('vp_ready', true, false));					}*/					nc.call('checkBandwith', null);					break;				case "NetStream.Play.Start":					Sprite(ctrl.getChildByName('player')).alpha = 1;					break;			}		}		private function initPlay():void{			var ext:String = VP_videoName.split(".")[1];			var justthename:String = VP_videoName.split(".")[0];			if(VP_videoPath != "" && VP_videoName != ""){				if(ext == 'flv' || ext == 'f4v'){					ns.play(justthename);				}else{					ns.play("mp4:" + VP_videoName); //for .mov and .mp4				}					}else{				ns.play(VP_videoPath);	//for static video only			}			/*playing = true;			sounding = true;			stopping = false;			updatePlayer();*/			//updatePlayer();		}		private function _onDrag($e:MouseEvent):void{			var rec:Rectangle = new Rectangle(0,0,Sprite(Sprite(ctrlmc.getChildByName('sb')).getChildByName('scrollbar_bg')).width - Sprite(Sprite(ctrlmc.getChildByName('sb')).getChildByName('scrub')).width,0);			Sprite(Sprite(ctrlmc.getChildByName('sb')).getChildByName('scrub')).startDrag(false,rec);			removeEventListener(Event.ENTER_FRAME, _onEnterFrame);			this.addEventListener(MouseEvent.MOUSE_UP, _onScrub);		}		private function _onScrub($e:MouseEvent):void{			stopDrag();			//startPoint = false;			midPoint = false;			mark10s = false;			mark5s = false;			scrubTo(Sprite(Sprite(ctrlmc.getChildByName('sb')).getChildByName('scrub')).x/(Sprite(Sprite(ctrlmc.getChildByName('sb')).getChildByName('scrollbar_bg')).width - Sprite(Sprite(ctrlmc.getChildByName('sb')).getChildByName('scrub')).width));			addEventListener(Event.ENTER_FRAME, _onEnterFrame);			this.removeEventListener(MouseEvent.MOUSE_UP, _onScrub);		}		private function scrubTo(ratio:Number):void{			var totalTime = vpc.totalTime;			var s:int = Math.floor(totalTime*ratio);			ns.seek(s);		}				private function replayVideo():void{			ns.resume();			playing = true;			stopping = false;			startPoint = false;			midPoint = false;			mark10s = false;			mark5s = false;			replayVisible = false;			Sprite(ctrl.getChildByName('bigReplay_btn')).visible = false;			updatePlayer();			addEventListener(Event.ENTER_FRAME, _onEnterFrame);			dispatchEvent(new VPEvent('video_replay',true,false));		}		/*public function customStart(b:Boolean):void{			if(b){				initCUSTOMSTART = true;			}		}*/				public function customEnd(b:Boolean):void{			if(b){				initCUSTOMEND = true;			}		}				public function exitFullScreen():void{			//dispatchEvent(new VPEvent('video_exit_fullscreen', true, false));			fullscreenVisible = false;			stage.displayState = StageDisplayState.NORMAL;			Sprite(ctrlmc.getChildByName('exitfullscreen_btn')).visible = false;			Sprite(ctrlmc.getChildByName('fullscreen_btn')).visible = true;		}				public function _onEnterFrame($e:Event):void{						var totalTime = vpc.totalTime;			var length = Sprite(Sprite(ctrlmc.getChildByName('sb')).getChildByName('scrollbar_bg')).width - Sprite(Sprite(ctrlmc.getChildByName('sb')).getChildByName('scrub')).width;						hotCallback(ns.time, vpc.totalTime);			//hotCallback(Math.abs(Sprite(Sprite(ctrlmc.getChildByName('sb')).getChildByName('scrub')).x-length));						//trace(Math.abs(Sprite(Sprite(ctrlmc.getChildByName('sb')).getChildByName('scrub')).x), totalTime );						if(totalTime != 0){				if(Math.abs(Sprite(Sprite(ctrlmc.getChildByName('sb')).getChildByName('scrub')).x-length)>1){					Sprite(Sprite(ctrlmc.getChildByName('sb')).getChildByName('scrub')).x = (ns.time/totalTime)*(length);					TextField(ctrlmc.getChildByName('t')).text = new Calculus().convertToMinSec(ns.time);					if((Math.abs(Sprite(Sprite(ctrlmc.getChildByName('sb')).getChildByName('scrub')).x) > 1) && !startPoint){						startPoint = true;						//mark5s = false;						dispatchEvent(new VPEvent('video_start',true,false));					}					if((Math.abs(Sprite(Sprite(ctrlmc.getChildByName('sb')).getChildByName('scrub')).x) > length/2) && !midPoint){						midPoint = true;						dispatchEvent(new VPEvent('video_midpoint',true,false));					}					if((Math.abs(Sprite(Sprite(ctrlmc.getChildByName('sb')).getChildByName('scrub')).x) > 10*(length/totalTime)) && !mark10s){						mark10s = true;						dispatchEvent(new VPEvent('video_10s',true,false));					}					if((Math.abs(Sprite(Sprite(ctrlmc.getChildByName('sb')).getChildByName('scrub')).x) > (totalTime - 5)*(length/totalTime)) && !mark5s){						if(!initREPLAY){							mark5s = true;							dispatchEvent(new VPEvent('video_complete',true,false));						}					}				}else{					if(initREPLAY){						dispatchEvent(new VPEvent('video_complete',true,false));					}else{						//trace('yo the video is done')						ns.seek(0); // need to check it out.						ns.pause();						playing = false;						stopping = true;						replayVisible = true;						if(initCUSTOMEND){							Sprite(ctrl.getChildByName('bigReplay_btn')).visible = false;						}else{							Sprite(ctrl.getChildByName('bigReplay_btn')).visible = true;						}						allOff();						updatePlayer();					}									Sprite(Sprite(ctrlmc.getChildByName('sb')).getChildByName('scrub')).x = 0;					TextField(ctrlmc.getChildByName('t')).text = "00:00";					removeEventListener(Event.ENTER_FRAME, _onEnterFrame);									dispatchEvent(new VPEvent('video_end',true,false));				}			}		}				public function pauseVideo():void{			if(playing){				ns.pause();				playing = false;				updatePlayer();				removeEventListener(Event.ENTER_FRAME, _onEnterFrame);				dispatchEvent(new VPEvent('video_pause',true,false));			}		}		public function playVideo():void{			if(!autoPlay){				autoPlay = true;				initPlay();				Sprite(ctrlmc.getChildByName('play_btn')).visible = false;				Sprite(ctrlmc.getChildByName('pause_btn')).visible = true;				playing = true;				//stopping = false;				updatePlayer();			}else{								if(replayVisible){					replayVideo();				}else{					ns.resume();					playing = true;					replayVisible = false;					Sprite(ctrl.getChildByName('bigReplay_btn')).visible = replayVisible;					Sprite(ctrlmc.getChildByName('play_btn')).visible = false;					Sprite(ctrlmc.getChildByName('pause_btn')).visible = true;					addEventListener(Event.ENTER_FRAME, _onEnterFrame);				}							}			/*try{				if($e.type == 'click'){					if(mobileMode == 'AND'){						mVisible = false;					}				}			}catch(e:Error){			}*/		}		public function loadNewVideo(s:String):void{			startPoint = false;			midPoint = false;			mark10s = false;			mark5s = false;			replayVisible = false;			Sprite(ctrl.getChildByName('bigReplay_btn')).visible = false;			ns.close();			Sprite(ctrl.getChildByName('player')).removeChild(vid);			VP_videoPath = s;			connect();		}				public function closeStream():void{			ns.close();		}				public function coffee(sugar:Number):void{			trace('too many sugar for you! Try tea.');		}				public function tea(sugar:Number):void{			trace('too many sugar for you! Try coffee.');		}				public function makeTheLogoBigger(logo:Sprite):void{			logo.scaleX = logo.scaleY = 5;			logo.x = this.stage.stageWidth/2;			logo.y = this.stage.stageHeight/2;			trace('That\'s a big ass logo, son!');		}				public function makeSoundOff($e:MouseEvent = null):void{			ns.soundTransform = new SoundTransform(0);			sounding = false;			updatePlayer();			if($e == null){				allOff();			}			dispatchEvent(new VPEvent('video_mute',true,false));		}				public function makeSoundOn($e:MouseEvent = null):void{			ns.soundTransform = new SoundTransform(1);			sounding = true;			updatePlayer();			if($e == null){				allOff();			}			dispatchEvent(new VPEvent('video_unmute',true,false));		}				public function loop():void{			ns.seek(0)			replayVideo();		}				public function set_ypos(n:Number):void{			ctrlmc.y = Number(size.split('x')[1]) - n;		}			}}